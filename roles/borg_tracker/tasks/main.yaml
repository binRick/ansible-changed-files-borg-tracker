---
##



- name: Common
  block:
    - name: Ensure BORG_PHASE
      when: "BORG_PHASE is not defined or (BORG_PHASE!='PRE_TASKS' and BORG_PHASE!='POST_TASKS')"
      fail:
        msg: "Variable BORG_PHASE must be set to PRE_TASKS OR POST_TASKS"
    - name: Ensure Facts
      when: ansible_date_time is not defined
      setup:
    - name: Set Base Facts
      set_fact:
        BORG_EXCLUDES: >
            --exclude /etc/selinux 
            --exclude /etc/exclude-test 
            --exclude /usr/src/kernels 
            {{BORG_EXCLUDES|default('')}}
        BORG_LOCK_WAIT: 5
        BORG_BACKUP_PATHS_HASH: "{{BORG_BACKUP_PATHS|to_json|md5}}"

    - name: Set Backup Json
      set_fact:
        PRE_TASKS_BASE: "tracker-{{BORG_BACKUP_PATHS_HASH}}"

    - debug: var=BORG_BACKUP_PATHS_HASH

    - name: Set Backup Json
      set_fact:
        BORG_QUOTA_GB: 5
        TASK_NAMES:
            PRE_TASKS: "{{PRE_TASKS_BASE}}-pre"
            POST_TASKS: "{{PRE_TASKS_BASE}}-post"
            INITIAL: "{{PRE_TASKS_BASE}}-initial"
    - name: Set Backup Json
      set_fact:
        BORG_LIST_REPO_NAMES_CMD: "borg list --lock-wait {{BORG_LOCK_WAIT}} {{BORG_REPO}} --format=\"{name}{NEWLINE}\""
        BORG_PRUNE_CMD: "borg prune --lock-wait {{BORG_LOCK_WAIT}} --keep-within 1d {{BORG_REPO}}"
        BORG_CREATE_CMD: "borg create {{BORG_EXCLUDES}} --lock-wait {{BORG_LOCK_WAIT}} --filter=AME -x -s --json --list {{BORG_REPO}}::$REPO_NAME {{BORG_BACKUP_PATHS|join(' ')}}"
        BORG_DELETE_CMD: "borg delete --lock-wait {{BORG_LOCK_WAIT}} {{BORG_REPO}}::$REPO_NAME"
        BORG_DIFF_CMD: "borg diff --lock-wait {{BORG_LOCK_WAIT}} --numeric-owner --sort {{BORG_EXCLUDES}} {{BORG_REPO}}::{{TASK_NAMES.PRE_TASKS}} {{TASK_NAMES.POST_TASKS}}"
        BORG_INIT_CMD: "borg init --storage-quota {{BORG_QUOTA_GB}}G -e repokey {{BORG_REPO}}"

    - name: Stat Borg Repo
      register: br
      stat: path={{BORG_REPO}}
    - debug: var=BORG_PHASE
      when: DEBUG_BORG is defined and DEBUG_BORG

- name: Ensure Borg Binary
  when: 
    - BORG_PHASE == 'PRE_TASKS'
  block:
    - name: Find borg in path
      ignore_errors: yes
      register: bip
      command: command -v borg

    - name: Download borg release to /bin
      when: bip is failed
      get_url: 
        url: https://github.com/borgbackup/borg/releases/download/1.1.10/borg-linux64
        dest: /bin/borg
        mode: 0o755
        owner: root
        group: root

    - name: Find borg in path
      when: bip is failed
      register: bip
      command: command -v borg

    - name: Find borg version
      register: bv
      command: borg --version

    - name: Debug borg version
      debug:
        msg: "Server has borg version {{bv.stdout}}}"

- name: Create Backup
  block:
    - name: Init Repo
      register:  init
      when: not br.stat.exists
      command: "{{BORG_INIT_CMD}}"

#    - name: Prune Repo
#      command: "{{BORG_PRUNE_CMD}}"

    - name: list repo names
      command: "{{BORG_LIST_REPO_NAMES_CMD}}"
      register: rn

    - name: debug rn
      debug: var=rn.stdout_lines

    - name: delete existing trackers
      when: 
        - BORG_PHASE == 'PRE_TASKS'
        - item in rn.stdout_lines
      loop: 
        - "{{TASK_NAMES.PRE_TASKS}}"
        - "{{TASK_NAMES.POST_TASKS}}"
      command: "{{BORG_DELETE_CMD}}"
      environment:
        REPO_NAME: "{{item}}"

    - name: Create initial repo
      when: not TASK_NAMES.INITIAL in rn.stdout_lines
      ignore_errors: yes
      command: "{{BORG_CREATE_CMD}}"
      environment:
        REPO_NAME: "{{TASK_NAMES.INITIAL}}"




    - debug: var=BORG_CREATE_CMD
      when: DEBUG_BORG is defined and DEBUG_BORG

    - name: Create Backup
      environment:
        REPO_NAME: "{{TASK_NAMES[BORG_PHASE]}}"
      command: "{{BORG_CREATE_CMD}}"
      register: _CB

    - name: Set Backup Results
      set_fact:
        CB: "{{_CB.stdout|from_json}}"
        LINES: "{{_CB.stderr_lines}}"
        BORG_CHANGES: 
            ADDED: "{{_CB.stderr_lines  | select('match', '^A ') | list| map('regex_replace', '^A ', '')|list }}"
            MODIFIED: "{{_CB.stderr_lines  | select('match', '^M ') | list| map('regex_replace', '^M ', '')|list }}"
            ERROR: "{{_CB.stderr_lines  | select('match', '^E ') | list| map('regex_replace', '^E ', '')|list }}"

    - name: set msg
      set_fact:
        BORG_MSG: "{{BORG_CHANGES.ADDED|list|length + BORG_CHANGES.MODIFIED|list|length}}/{{CB.archive.stats.nfiles}} File Changes in directories {{BORG_BACKUP_PATHS|join(', ')}} after {{CB.archive.duration}} seconds."

    - name: Debug Results
      when: DEBUG_BORG is defined and DEBUG_BORG
      block:
        - debug: var=CB
          when: DEBUG_BORG is defined and DEBUG_BORG

        - name: Debug Results
          when: DEBUG_BORG is defined and DEBUG_BORG
          debug:
            msg: "{{BORG_MSG}}"

        - debug: var=LINES
          when: DEBUG_BORG is defined and DEBUG_BORG
        - debug: var=BORG_CHANGES
          when: DEBUG_BORG is defined and DEBUG_BORG

    - name: set PRE_TASKS_REPORT
      when: BORG_PHASE == 'PRE_TASKS'
      set_fact:
        PRE_TASKS_REPORT: 
            state: success
            msg: "{{BORG_MSG}}"
            changes:
                added: "{{BORG_CHANGES.ADDED}}"
                modified: "{{BORG_CHANGES.MODIFIED}}"
                error: "{{BORG_CHANGES.ERROR}}"
            duration: "{{CB.archive.duration}}"
            files: "{{CB.archive.stats.nfiles}}"
            cmd: "{{BORG_CREATE_CMD}}"

    - name: set POST_TASKS_REPORT
      when: BORG_PHASE == 'POST_TASKS'
      block:
        - name: Copy parseBorgDiff.sh script
          loop:
            - parseBorgDiff.sh
            - borg-common.sh
          copy: src={{item}} dest=/root/{{item}} mode=0o700 owner=root group=root
        - name: Debug diff cmd
          debug: var=BORG_DIFF_CMD
          when: DEBUG_BORG is defined and DEBUG_BORG

        - name: Compare Repos
          when: BORG_PHASE == 'POST_TASKS'
          register: PT
          command: "{{BORG_DIFF_CMD}}"

#        - debug: var=PT.stdout_lines
#          when: DEBUG_BORG is defined and DEBUG_BORG
#        - debug: var=PT.stderr_lines
#          when: DEBUG_BORG is defined and DEBUG_BORG
        - name: record diff output to file
          copy:
            dest: /root/.borg-backup.diff
            content: "{{PT.stdout}}"
            owner: root
            group: root
            mode: 0o600


        - name: Execute parseBorgDiff.sh script
          ignore_errors: yes
          register: PBD
          command: /root/parseBorgDiff.sh /root/.borg-backup.diff

        - name: debug Parser Results
          when: DEBUG_BORG is defined and DEBUG_BORG
          debug: var=PBD.stdout

        - name: Execute bd
          register: BD
          shell: source /root/borg-common.sh && bd {{BORG_REPO}} {{TASK_NAMES.PRE_TASKS}} {{TASK_NAMES.POST_TASKS}}

        - name: debug BD
          when: DEBUG_BORG is defined and DEBUG_BORG
          debug: var=BD.stdout

        - name: dev
          block:
            - name: Execute bdd record
              register: BDD
              ignore_errors: yes
              shell: source /root/borg-common.sh && bdd {{BORG_REPO}} {{TASK_NAMES.PRE_TASKS}} {{TASK_NAMES.POST_TASKS}} record

            - name: debug BDD
              when: DEBUG_BORG is defined and DEBUG_BORG
              debug: var=BDD.stdout

        - name: dev
          when: BORG_BDD is defined and BORG_BDD
          block:
            - name: Execute bdd delete
              register: BDD_delete
              ignore_errors: yes
              when: 
                - BDD is success
                - no
              shell: source /root/borg-common.sh && bdd {{BORG_REPO}} {{TASK_NAMES.PRE_TASKS}} {{TASK_NAMES.POST_TASKS}} delete

            - name: debug BDD_delete
              when: DEBUG_BORG is defined and DEBUG_BORG
              debug: var=BDD_delete.stdout


        - name: set
          set_fact:
            PARSED: "{{PBD.stdout|from_json}}"

        - name: set
          set_fact:
            POST_TASKS_REPORT: 
                state: success
#                parsed: "{{PBD.stdout|from_json}}"
#                files_added: "{{PARSED.files_added}}"
#                files_removed: "{{PARSED.files_removed}}"
#                dirs_removed: "{{PARSED.dirs_removed}}"
#                dirs_added: "{{PARSED.dirs_added}}"
#                files_changed: "{{PARSED.files_changed}}"
#                files_changed_b64: "{{PARSED._files_changed_b64|b64decode}}"
#                files_removed_b64: "{{PARSED._files_removed_b64|b64decode}}"
#                files_added_b64: "{{PARSED._files_added_b64|b64decode}}"
#                dirs_removed_b64: "{{PARSED._dirs_removed_b64|b64decode}}"
#                dirs_added_b64: "{{PARSED._dirs_added_b64|b64decode}}"
